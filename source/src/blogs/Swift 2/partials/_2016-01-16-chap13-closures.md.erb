# Closures
---
> ####  Notes
> 1. ทุกฟังก์ชันคือ closures (all functions are closures)

---


&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Let’s get started. Create a new playground called Closures.playground.

## Closure Syntax

#### Listing 13.1 Starting with an array


<pre class="prettyprint linenums">
import UIKit

var volunteerCounts = [1,3,40,32,2,53,77,13]
</pre>

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;เป้าหมายของเรา คือ ต้องการเรียงลำดับตัวแปร array ของ volunteerCounts โดยเรียงจากน้อยไปหามาก. โชคดีที่ Swift มีเมธอด `sort(_:)` ช่วยในการเรียงลำดับ

> ข้อสังเกตุ : We call a function a method when it is defined on a type, like the Array type. More on this topic in Chapter 15.

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`sort(_:)` ต้องการ argument จำนวน 1 ตัว : Closure จะแสดงให้เราเห็นว่าทำไม มีตัวแปร แค่ตัวเดียว แต่มันสามารถทำการเรียงลำดับให้เราได้


#### Listing 13.2 Sorting the array


<pre class="prettyprint linenums">
import UIKit

var volunteerCounts = [1,3,40,32,2,53,77,13]

func sortAscending(i: Int, j: Int) -> Bool {
    return i < j
}

let volunteersSorted = volunteerCounts.sort(sortAscending)
</pre>

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; เราได้สร้างฟังก์ชัน  `sortAscending(_:j:)` ที่ทำหน้าที่เปรียบเทียบพารามิเตอร์ 2 ตัวที่เป็นชนิด Int โดยมีการส่งค่ากลับมาเป็น Boolean. 


ฟังก์ชัน `sortAscending(_:j:)` จะส่งค่ากลับมาเป็น true ถ้าตัวแปร Int i มีค่ามากกว่า ตัวแปร Int j


> ข้อสังเกตุ : เราจะต้องส่งตัวแปร `Int i` จะมาก่อน `Int j`

![image](../../../../../../../../../../../images/categories/Swift%202/closures-001.png)

---


## Closure Expression Syntax

#### General form closures syntax

<pre class="prettyprint linenums">
{(<mark>parameters</mark>) -> return <mark>type</mark> in
// Code 
}
</pre>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; เราสามารถเขียน closure expression ภายใต้ `{}` ได้


#### Listing 13.3 Refactoring your sorting code

<pre class="prettyprint linenums">
import UIKit

var volunteerCounts = [1,3,40,32,2,53,77,13]

let volunteersSorted = volunteerCounts.sort({
    (i: Int, j: Int) -> Bool in
    return i < j
})
</pre>

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ในส่วนนี้จะเห็นว่าโค้ดของเราสะอาดขึ้น ซึ่งเราได้ทำการเขียน closures แบบ inline โดยใช้ ฟังก์ชัน `sort(_:)` โดยมีการส่ง arguments จำนวน 2 ตัวเข้าไปในฟังก์ชันนี้ด้วย


#### Listing 13.4 Taking advantage of type inference
<pre class="prettyprint linenums">
import UIKit

var volunteerCounts = [1,3,40,32,2,53,77,13]

let volunteersSorted = volunteerCounts.sort({ i, j in i < j })
</pre>

มีการพัฒนาเพิ่ม 3 ส่วน คือ

1. You can remove the return type because the compiler knows that checking if i < j will return true or false, that is a Bool value.
2. You move the entire closure expression to be one line.
3. You remove the keyword return

ซึ่งผลลัพธ์ที่ได้ ยังคงเหมือนเดิม

#### Listing 13.5 Using shorthand syntax for arguments
<pre class="prettyprint linenums">
import UIKit

var volunteerCounts = [1,3,40,32,2,53,77,13]

let volunteersSorted = volunteerCounts.sort({ $0 < $1 })
</pre>

#### Listing 13.6 Inline closure as the function’s final argument
<pre class="prettyprint linenums">
import UIKit

var volunteerCounts = [1,3,40,32,2,53,77,13]

let volunteersSorted = volunteerCounts.sort { $0 < $1 }
</pre>

---

## Functions as Arguments

#### Listing 13.9 Adding budget considerations

<pre class="prettyprint linenums">
import UIKit

func makeTownGrand(budget: Int, condition: Int -> Bool) -> ((Int, Int) -> Int)? {
    
    if condition(budget) {
        
        func buildRoads(lightsToAdd: Int, toLights: Int) -> Int {
            return toLights + lightsToAdd
        }
        return buildRoads
        
    } else {
        return nil
    }
    
}

func evaluateBudget(budget: Int) -> Bool {
    return budget > 10000
}

var stoplights = 4
if let townPlan = makeTownGrand(1000, condition: evaluateBudget) {
    stoplights = townPlan(4, stoplights)
}

print("Knowhere has \(stoplights) stoplights.")
</pre>
สิ่งที่เพิ่มเข้ามา คือ ฟังก์ชัน ` makeTownGrand(_:condition:)` ซึ่งต้องการ arguments จำนวน 2 ตัว คือ

1. ตัวแปร budget, ซึ่งก็คือ งบประมาณที่มี นั่นเอง
2. ตัวแปร condition, ซึ่งก็คือ เงื่อนไขที่ใช้พิจารณาว่าจะสามารถสร้างได้หรือไม่? โดยในส่วนนี้เป็นการส่งค่าฟังก์ชัน `evaluateBudget`, ซึ่งฟังก์ชันนี้ ต้องการ argument จำนวน 1 ตัว คือ budget ที่มีชนิด Int และส่งค่ากลับเป็นชนิด Bool โดยถ้า budget(งบประมาณ) มากกว่า 10000 จะส่งค่ากลับมาเป็น true.


&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; จะเห็นว่า ฟังก์ชัน `makeTownGrand(_:condition:)` มีการส่งค่ากลับมาที่แตกต่างออกไป ซึ่งค่าที่ส่งกลับมาคือ `((Int, Int) -> Int)?` หมายความว่า ฟังก์ชัน `makeTownGrand(_:)` จะส่งค่ากลับมาเป็นชนิดฟังก์ชันที่ต้องการ argument ชนิด Int จำนวน 2 ตัวและส่งค่ากลับเป็น Int แบบ Optional แสดงว่าเราจะต้องมาทำการ Unwrap ก่อนใช้งาน.

<br/>

####ลำดับการทำงาน :
1. กำหนดให้ตัวแปร stoplights มีค่าเป็น 4
2. เรียกใช้งานฟังก์ชัน `makeTownGrand(1000, condition: evaluateBudget)` โดยส่งฟังก์ชัน `evaluateBudget` ไปกับตัวแปร condition
3. ตรวจสอบเงื่อนไข ด้วย `if condition(budget) {}` ซึ่งในตอนนี้ตัวแปร condition ของเราเก็บค่าชนิดฟังก์ชัน `evaluateBudget` ไว้
	
	- ถ้า budget > 10000 จะส่งค่ากลับมาเป็น true และจะส่งค่า buildRoads ที่เป็นฟังก์ชันชนิด Optional กลับไปให้ตัวแปร townPlan, ในขณะนี้ จะนำตัวแปร townPlan ไปใช้งานได้ จะต้องทำการ Unwrap ก่อน
		* ถ้าตัวแปร townPlan มีค่า, ก็จะเรียกใช้งานฟังก์ชัน `buildRoads` ซึ่งเก็บไว้ในตัวแปร townPlan, `townPlan(4, stoplights)`
	- ถ้า budget <= 10000 จะส่งค่ากลับมาเป็น false
4. แสดงค่าด้วย `print("Knowhere has \(stoplights) stoplights.")`

<br/>

#### Listing 13.10 Building more roads

<pre class="prettyprint linenums">
import UIKit

func makeTownGrand(budget: Int, condition: Int -> Bool) -> ((Int, Int) -> Int)? {
    if condition(budget) {
        func buildRoads(lightsToAdd: Int, toLights: Int) -> Int {
            return toLights + lightsToAdd
        }
        return buildRoads
        
    } else {
        return nil
    }
}

func evaluateBudget(budget: Int) -> Bool {
    return budget > 10000
}


var stoplights = 4
if let townPlan = makeTownGrand(80000, condition: evaluateBudget) {
    stoplights = townPlan(4, stoplights)
}

<b>if let newTownPlan = makeTownGrand(10500, condition: evaluateBudget) {
    stoplights = newTownPlan(4, stoplights)
}</b>

print("Knowhere has \(stoplights) stoplights.")
</pre>

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; สังเกตผลลัพธ์ที่ console

---

## Closures Capture Values

#### Listing 13.11 Tracking growthds

<pre class="prettyprint linenums">
import UIKit

func makeGrowthTracker(forGrowth growth: Int) -> () -> Int {
    var totalGrowth = 0
    func growthTracker() -> Int {
        totalGrowth += growth
        return totalGrowth
    }
    return growthTracker
}

var currentPopulation = 5422
let growBy500 = makeGrowthTracker(forGrowth: 500)
growBy500()
</pre>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ฟังก์ชัน `makeGrowthTracker(forGrowth:)` จะสร้างฟังก์ชัน `growthTracker()`, โดยที่ฟังก์ชัน `makeGrowthTracker(forGrowth:)` ต้องการ argument จำนวน 1 ตัว ที่เป็นชนิด Int และส่งค่าที่เป็นชนิดฟังก์ชันกลับมา, ฟังก์ชันนี้เป็นฟังก์ชันแบบไม่ต้องการ argument และจะ return ค่า Int กลัับมา

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; จะเห็นว่าฟังก์ชัน `growthTracker()` จะทำการ Capture ค่าของตัวแปร `totalGrowth` จาก enclosing scope ของมัน. หลังจากที่ฟังก์ชัน `growthTracker()` ถูกสร้างขึ้น, ตัวแปร `totalGrowth` จะเพิ่มขึ้นโดยจะเพิ่มขึ้นตามจำนวนที่ระบุใน argument ที่ส่งไปให้ฟังก์ชัน `makeGrowthTracker(forGrowth:)`

<pre class="prettyprint linenums">
import UIKit

func makeGrowthTracker(forGrowth growth: Int) -> () -> Int {
    var totalGrowth = 0
    func growthTracker() -> Int {
        totalGrowth += growth
        return totalGrowth
    }
    return growthTracker
}

var currentPopulation = 5422
let growBy500 = makeGrowthTracker(forGrowth: 500)
growBy500()
</pre>

สังเกตผลลัพธ์...
![image](<%= current_page.data.baseURL %>images/categories/Swift%202/closures%20Example%20Listing%2013.11.png)

<br/>

#### Listing 13.12 The population is booming

<pre class="prettyprint linenums">
import UIKit

func makeGrowthTracker(forGrowth growth: Int) -> () -> Int {
    var totalGrowth = 0
    func growthTracker() -> Int {
        totalGrowth += growth
        return totalGrowth
    }
    return growthTracker
}

var currentPopulation = 5422
let growBy500 = makeGrowthTracker(forGrowth: 500)
growBy500()
growBy500()
growBy500()
currentPopulation += growBy500() // currentPopulation is now 7422
</pre>
สังเกตผลลัพธ์...
![image](<%= current_page.data.baseURL %>images/categories/Swift%202/closures%20Example%20Listing%2013.12.png)

---

## Closures Are Reference Types

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Closures are <i>reference types</i> หมายความว่า เมื่อคุณ assign function ให้กับตัวแปรหรือค่าคงที่ใดๆ ถ้ามีการเรียกใช้งานตัวแปรหรือค่าคงที่ มันจะเป็นการชี้ไปยัง funciton นั้นๆ ได้เลย.สิ่งที่สำคัญอย่างหนึ่งก็คือ ข้อมูลจะถูก capture โดย scope ของฟังก์ชัน และจะเปลี่ยนแปลง ถ้ามีการเรียกฟังก์ชันผ่านทาง ตัวแปรหรือค่าคงที่ใหม่ที่สร้างขึ้น.

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;เพื่อให้เห็นผลลัพธ์ ดังกล่าว, ให้ทำการประกาศค่าคงที่ขึ้นมาใหม่ ชื่อว่า `anotherGrowBy500` และกำหนดให้มีค่าเท่ากับฟังก์ชัน `growBy500()`

<br/>

#### Listing 13.13 Duplicate growth

<pre class="prettyprint linenums">
import UIKit

func makeGrowthTracker(forGrowth growth: Int) -> () -> Int {
    var totalGrowth = 0
    func growthTracker() -> Int {
        totalGrowth += growth
        return totalGrowth
    }
    return growthTracker
}

var currentPopulation = 5422
let growBy500 = makeGrowthTracker(forGrowth: 500)
growBy500()
growBy500()
growBy500()
currentPopulation += growBy500() // currentPopulation is now 7422
<b>
let anotherGrowBy500 = growBy500
anotherGrowBy500() // totalGrowth now equal to 2500
</b>
</pre>

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ในตอนนี้ ค่าคงที่ `anotherGrowBy500` ชี้ไปยังจุดเดียวกันกับฟังก์ชัน `growBy500` นั่นแสดงว่า ถ้าคุณเรียกใช้งาน `anotherGrowBy500()` ตัวแปร `totalGrowth` จะเพิ่มขึ้นอีก 500 แสดงว่าค่าของตัวแปร `totalGrowth` จะเพิ่มเป็น 2,500 นั่นเอง

<br/>

#### Listing 13.14 Another population to track

<pre class="prettyprint linenums">
import UIKit

func makeGrowthTracker(forGrowth growth: Int) -> () -> Int {
    var totalGrowth = 0
    func growthTracker() -> Int {
        totalGrowth += growth
        return totalGrowth
    }
    return growthTracker
}

var currentPopulation = 5422
let growBy500 = makeGrowthTracker(forGrowth: 500)
growBy500()
growBy500()
growBy500()
currentPopulation += growBy500() // currentPopulation is now 7422

let anotherGrowBy500 = growBy500
anotherGrowBy500() // totalGrowth now equal to 2500
<b>
var someOtherPopulation = 4061981
let growBy10000 = makeGrowthTracker(forGrowth: 10000)
someOtherPopulation += growBy10000()
currentPopulation</b>
</pre>

![image](<%= current_page.data.baseURL %>images/categories/Swift%202/closures%20Example%20Listing%2013.14.png)

---

## Functional Programming
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Swift adopts some patterns from the functional programming paradigm. It is difficult to provide a concrete definition of functional programming because people use the phrase with different meanings and intentions, but typically it is understood to include:

- <b><i>First-class functions</i></b> - สามารถส่งผ่าน argument ที่เป็นฟังก์ชัน ไปให้อีกฟังก์ชันได้ ซึ่งอาจจะเก็บไว้ในตัวแปรก่อน
- <b><i>Pure functions</i></b> - functions have no side effects; ฟังก์ชันที่ไม่สามารถเปลี่ยนแปลงได้ ไม่ว่าจะอยู่ส่วนไหนของโปรแกรม ยกตัวอย่างเช่นฟังก์ชัน sin, cos, fibonacci และ factorial
- <b><i>Immutability</i></b> - mutability is de-emphasized as it is more difficult to reason about data whose values can change.
- <b><i>Strong typing</i></b> - a strong type system increases the runtime safety of the code because the guarantees of the language’s type system are checked at compile time.

Swift supports all of these approaches.

Functional programming จะทำให้โค้ดของคุณ สั้นกระชับและอ่านเข้าใจง่าย.

ในภาษา Swift ได้เตรียม <i>higher- order functions</i> ซึ่งช่วยให้นักพัฒนา ทำงานง่ายขึ้น เช่น `map(_:)`, `filter(_:)` และ `reduce(_:combine:)`

Let’s look at what these functions add to Swift’s toolkit.



---

## Higher-order functions
<b><i>Higher-order functions </i></b> จะมีอย่างน้อยหนึ่งฟังก์ชันที่เป็น input. ความจริงแล้ว ในบทนี้เราลองทำงานกับ higher- order functions มาแล้ว นั่นคือ `sort(_:)`. ในตอนนี้เราจะมาทดลองใช้งาน `map(_:)`, `filter(_:)` และ `reduce(_:combine:)`

### map(_:)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>`map(_:)`</b> คือ ฟังก์ชันที่ใช้สำหรับแปลงข้อมูลใน array

<br/>

#### Listing 13.15 Setting populations by precinct

<pre class="prettyprint linenums">
let precinctPopulations = [1244, 2021, 2157]
</pre>

<br/>

#### Listing13.16 Usingmap(_:)toestimatepopulation

<pre class="prettyprint linenums">
let precinctPopulations = [1244, 2021, 2157]
let projectedPopulations = precinctPopulations.map {
    (population: Int) -> Int in
    return population * 2
}
projectedPopulations
</pre>

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ในส่วนนี้ เราจะใช้ `map(_:)` ทำการเปลี่ยนแปลงค่าใน `precinctPopulations` (สังเกตว่า เราจะใช้การเขียนแบบ trailing closure syntax).

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ต่อมา, เราได้ทำการประกาศพารามิเตอร์ ชื่อว่า `population` โดยมีชนิดเป้น Int และระบุให้ closure ส่งค่ากลับเป็นชนิด Int ด้วย.

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; `map(_:)` จะทำการเรียกใช้งานฟังก์ชันนี้ ในทุกๆค่าของ `precinctPopulations` โดยเป็นการเพิ่มขึ้น 200% และผลลัพธ์ของ array จะเก็บไว้ใน `projectedPopulations` ซึ่งจะมีค่าเป็น 2488, 4042 และ 4314

![image](<%= current_page.data.baseURL %>images/categories/Swift%202/closures%20Example%20Listing%2013.16.png)

<br/>

### filter(_:)

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>`filter(_:)`</b> ก็เหมือนกับ `map(_:)` นั่นแระ เอาไว้ทำงานกับ array ซึ่งสามารถกำหนด closure expression เป็น argument ให้กับมันได้ โดยที่เป้าหมายคือ การทำ filter ค่าในตัวแปร array ตามเงื่อนไขที่เรากำหนด. The resulting array will contain the values of the original array that passed the test.

<br/>

#### Listing 13.17 Filtering an array

<pre class="prettyprint linenums">
import UIKit

let precinctPopulations = [1244, 2021, 2157]
let projectedPopulations = precinctPopulations.map {
    (population: Int) -> Int in
    return population * 2
}
projectedPopulations
<b>
let bigProjections = projectedPopulations.filter {
    (projection: Int) -> Bool in
    return projection > 4000
}
bigProjections</b>
</pre>

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ตามตัวอย่างนี้ เราเขียนแบบ trailing closure syntax ซึ่ง closure นี้ จะกำหนดให้ `projection` เป็น argument ที่มีชนิด Int และส่งค่ากลับเป็นชนิด Bool, โดยที่ใน closure จะเป็นการตรวจสอบค่า `projection` ที่มีค่ามากกว่า 4000 และส่งค่ากลับมาเก็บไว้ในตัวแปร `bigProjections` ซึ่งก็คือชนิด array นั่นเอง

![image](<%= current_page.data.baseURL %>images/categories/Swift%202/closures%20Example%20Listing%2013.17.png)

<br/>

### reduce(_:combine:)


&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; `reduce(_:combine:)` ทำหน้าที่ลดรูปจาก collection value ให้เป็น single value 

<br/>

#### Listing 13.18 Reducing an array to a single value

<pre class="prettyprint linenums">
import UIKit

let precinctPopulations = [1244, 2021, 2157]
let projectedPopulations = precinctPopulations.map {
    (population: Int) -> Int in
    return population * 2
}
projectedPopulations

let bigProjections = projectedPopulations.filter {
    (projection: Int) -> Bool in
    return projection > 4000
}
bigProjections
<b>
let totalProjection = projectedPopulations.reduce(0) {
    (accumulatedProjection: Int, precinctProjection: Int) -> Int in
    return accumulatedProjection + precinctProjection
}
totalProjection</b>
</pre>

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; สำหรับ argument แรกของ `reduce(_:combine:)` คือ ค่าเริ่มต้น และ argument ที่สองของ `reduce(_:combine:)` คือ closure ซึ่งในกรณีนี้เราต้องการผลรวมหรือบวกค่าที่อยู่ใน array `projectedPopulations` ทุกตัว จากโค้ดข้างต้น หมายความว่า ค่าเริ่มต้น คือ `0` 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ลำดับถัดมา เป็น closure ทีมี 2 arguments โดยมีชนิดข้อมูลแบบ Int ทั้งคู่ สุดท้ายแล้ว ผลลัพธ์ที่ได้คือผลรวมของทุกๆ ค่าที่เป็นสมาชิกใน array `projectedPopulations` ซึ่งจะถูกเก็บไว้ใน `totalProjection` มีค่าเป็น 10844 นั่นเอง!!!

![image](<%= current_page.data.baseURL %>images/categories/Swift%202/closures%20Example%20Listing%2013.18.png)

<br/>

---

<br/>

## Gold Challenge

Use what you have learned in this chapter to clean up the implementation of reduce(_:combine:) presented above. The implementation can be shortened quite significantly: your solution should be expressed in one line. When you are done, take a look at the sample code for the other higher-order functions and practice with them.

<pre class="prettyprint linenums">
import UIKit

let precinctPopulations = [1244, 2021, 2157]
let projectedPopulations = precinctPopulations.map {
    (population: Int) -> Int in
    return population * 2
}
projectedPopulations

let bigProjections = projectedPopulations.filter {
    (projection: Int) -> Bool in
    return projection > 4000
}
bigProjections

let totalProjection = projectedPopulations.reduce(0) {return $0 + $1}
totalProjection
</pre>


---

