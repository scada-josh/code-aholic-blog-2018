# การใช้งาน TableView (widget.*)
![separate line][1]	

## การสร้าง TableView

---

<br/>

<pre class="prettyprint linenums">
-- Create the widget
local tableView = widget.newTableView(
    {
        left = 0,
        top = 0,
        height = display.contentHeight,
        width = display.contentWidth,
        onRowRender = onRowRender,
        onRowTouch = onRowTouch,
        listener = scrollListener
    }
)

sceneGroup:insert(tableView)
</pre>

<br/>

[![ภาพแสดง ผลลัพธ์ของการสร้าง TableView][7]](){: .fancybox-button 
               data-fancybox-group="using-tableview-001"
               href="<%= current_page.data.baseURL %>images/categories/Corona SDK/using-tableview-001.png"}


## การ Insert ข้อมูลให้กับ TableView

---

<br/>

#### เตรียมชุดข้อมูลสำหรับแสดงผลบน TableView
<pre class="prettyprint linenums">
local rowData = {{id = 1, name = "cat",     leg = 4},
                 {id = 2, name = "Tiger",   leg = 4},
                 {id = 3, name = "Bird",    leg = 2},
                 {id = 4, name = "Leo",     leg = 4},
                 {id = 5, name = "Buffaro", leg = 4},
                 {id = 6, name = "Cow",     leg = 4}}  
</pre>

<br/>

#### วนลูปด้วย for-in
<pre class="prettyprint linenums">
for k,v in pairs(rowData) do
    print("k = "..k..", name = "..v.name..", leg = "..v.leg)
end
</pre>

<br/>

#### เพิ่มข้อมูลเข้าไปใน TableView
<pre class="prettyprint linenums">
for k,v in pairs(rowData) do
    print("k = "..k..", name = "..v.name..", leg = "..v.leg)

    -- Insert a row into the tableView
    tableView:insertRow(
        {
            isCategory = false,
            rowHeight = 100,
            rowColor = {0.5, 0.5, 0},
            lineColor = {0.9, 0.9, 0.9}
        }
    )
end
</pre>

[![ภาพแสดง ผลลัพธ์ของการสร้าง TableView][8]](){: .fancybox-button 
               data-fancybox-group="using-tableview-001"
               href="<%= current_page.data.baseURL %>images/categories/Corona SDK/using-tableview-002.png"}
               
<br/>

## ได้เวลาแสดงผล

---

* ส่งค่า params ที่มีชนิดข้อมูลเป็นแบบอาเรย์ (Array)
* รับค่าไปแสดงผลในฟังก์ชัน **onRowRender**




## แสดงผลบน TableView เป็นหน้าที่ของฟังก์ชัน `onRowRender`
<pre class="prettyprint linenums">
local function onRowRender( event )

    -- Get reference to the row group
    local row = event.row

    -- Cache the row "contentWidth" and "contentHeight" because the row bounds can change as children objects are added
    local rowHeight = row.contentHeight
    local rowWidth = row.contentWidth

    <mark>local params = row.params</mark>

    local title = display.newText( row, params.name, 8, rowHeight/2, native.systemFont, 15 )
    title.anchorX = 0
    title:setFillColor( 0.8, 0.8, 0.8 )

    local txtLeg = display.newText( row, "Leg : "..params.leg, rowWidth - 15, rowHeight/2, native.systemFont, 15 )
    txtLeg.anchorX = 1
    txtLeg:setFillColor( 0.8, 0.8, 0.8 )

end
</pre>

<pre class="prettyprint linenums">
-- "scene:create()"
function scene:create( event )

    local sceneGroup = self.view

    local params = event.params

          print("productID : ", params.productID)
          print("color : ", params.color)

    -- local rect = display.newRect( sceneGroup, display.contentCenterX, display.contentCenterY, 100, 100 )
    local rect = display.newRect( sceneGroup, display.contentCenterX, 
    										  display.contentCenterY, 
    										  display.contentWidth, 
    										  display.contentHeight )
    	  rect:setFillColor( 0, 0, 1 )


    local  nextBtn = display.newText( sceneGroup, "Next", 
    									display.contentWidth - 40, 
    									display.contentCenterY , 
    									native.systemFont , 22 )

	-- myScene2 : create function
	local function listener(event) 
		local options = {
		    effect = "slideLeft",
		    time = 800
		}
		composer.gotoScene( "myScene2", options )
    end


    nextBtn:addEventListener( "tap", listener )

    -- Initialize the scene here
    -- Example: add display objects to "sceneGroup", add touch listeners, etc.

<mark>local rowData = {{id = 1 , name = "cat",     leg = 4},
                 {id = 2 , name = "Tiger",   leg = 4},
                 {id = 3 , name = "Bird",    leg = 2},
                 {id = 4 , name = "Leo",     leg = 4},
                 {id = 5 , name = "Buffaro", leg = 4},
                 {id = 6 , name = "Cow",     leg = 4},
                 {id = 7 , name = "cat",     leg = 4},
                 {id = 8 , name = "Tiger",   leg = 4},
                 {id = 9 , name = "Bird",    leg = 2},
                 {id = 10, name = "Leo",     leg = 4},
                 {id = 11, name = "Buffaro", leg = 4},
                 {id = 12, name = "Cow",     leg = 4}}</mark>     

    -- Create the widget
    local tableView = widget.newTableView(
        {
            left = 0,
            top = 0,
            height = display.contentHeight,
            width = display.contentWidth,
            onRowRender = onRowRender,
            onRowTouch = onRowTouch,
            listener = scrollListener
        }
    )

    sceneGroup:insert(tableView)

    for k,v in pairs(rowData) do
        print("k = "..k..", name = "..v.name..", leg = "..v.leg)

        -- Insert a row into the tableView
        tableView:insertRow(
            {
                isCategory = false,
                rowHeight = 80,
                rowColor = {0.5, 0.5, 0},
                lineColor = {0.9, 0.9, 0.9},
                <mark>params = v</mark>
            }
        )
    end
end
</pre>


<br/>

## ได้เวลา Interactive

---

#### รองรับ Event การกระทำกับ TableView เป็นหน้าที่ของฟังก์ชัน `onRowTouch` [![separate line][5]](https://docs.coronalabs.com/api/library/widget/newTableView.html#onrowtouch-optional){: target="_blank"}

**onRowTouch (optional)**

- Listener. The function used to listen for TableView touch/tap events. 	
- **Event.phase** values include 
		
	* "tap", 
	* "press", 
	* "release" - กดแล้วปล่อย 
	* "swipeLeft", 
	* "swipeRight". 

In addition, event.target is a reference to the row that was interacted with and `event.target.index` is the index number of that row.

<pre class="prettyprint linenums">
local function onRowTouch( event )
	local row = event.target
	local params = row.params

	print( "name = "..params.name )
end
</pre>

ถ้าเราต้องการให้กดที่ TableView แล้วให้แสดง Scene2 ออกมา พร้อมส่งพารามิเตอร์ไปด้วย สามารถทำได้ ดังนี้

#### เขียนโค้ดใน `onRowTouch`
<pre class="prettyprint linenums">
local function onRowTouch( event )
	
	local row = event.target
	local params = row.params

	if (event.phase == "release") then
		print( "name = "..params.name )

		local options = {
			effect = "slideLeft",
			time = 800,
			params = { animalName = params.name }
		}
		composer.gotoScene( "myScene2", options )
	end
end
</pre>



#### ไฟล์ Scene2
<pre class="prettyprint linenums">
-- sceneGroup
-- -- rect
-- -------------------------------------------------------------------------------

local composer = require( "composer" )

local scene = composer.newScene()

<mark>local animal_name = nil</mark>

-- -----------------------------------------------------------------------------------------------------------------
-- All code outside of the listener functions will only be executed ONCE unless "composer.removeScene()" is called
-- -----------------------------------------------------------------------------------------------------------------

-- Local forward references should go here

-- -------------------------------------------------------------------------------

-- myScene2 : create function
-- "scene:create()"
function scene:create( event )

    local sceneGroup = self.view

    local rect = display.newRect( sceneGroup, display.contentCenterX, display.contentCenterY, display.contentWidth, display.contentHeight )
    	  rect:setFillColor( 1, 0, 0 )


   	local  backBtn = display.newText( sceneGroup, "Back", 40, display.contentCenterY , native.systemFont , 22 )

    -- myScene2 : create function "fn_backToHome"
    local function fn_backToHome(event) 
		local options = {
		    effect = "slideRight",
		    time = 800
		}
		composer.gotoScene( "home", options )
    end
    backBtn:addEventListener( "tap", fn_backToHome )



   	local  nextBtn = display.newText( sceneGroup, "Next", display.contentWidth - 40, display.contentCenterY , native.systemFont , 22 )

    -- myScene2 : create function "fn_backToHome"
    local function fn_goToScene3(event) 
		local options = {
		    effect = "slideLeft",
		    time = 800
		}
		composer.gotoScene( "myScene3", options )
    end
    nextBtn:addEventListener( "tap", fn_goToScene3 )

    -- Initialize the scene here
    -- Example: add display objects to "sceneGroup", add touch listeners, etc.
end

-- myScene2 : show function
-- "scene:show()"
<strong>function scene:show( event )

    local sceneGroup = self.view
    local phase = event.phase

    local params = event.params

    if ( phase == "will" ) then
        -- Called when the scene is still off screen (but is about to come on screen)
        <mark>animal_name = display.newText( sceneGroup, params.animalName, display.contentCenterX, display.contentCenterY, native.systemFont, 20 )</mark>

    elseif ( phase == "did" ) then
        -- Called when the scene is now on screen
        -- Insert code here to make the scene come alive
        -- Example: start timers, begin animation, play audio, etc.
    end
end

-- myScene2 : hide function
-- "scene:hide()"
function scene:hide( event )

    local sceneGroup = self.view
    local phase = event.phase

    if ( phase == "will" ) then
        -- Called when the scene is on screen (but is about to go off screen)
        -- Insert code here to "pause" the scene
        -- Example: stop timers, stop animation, stop audio, etc.
    elseif ( phase == "did" ) then
        -- Called immediately after scene goes off screen
        <mark>display.remove( animal_name )</mark>
    end
end</strong>

-- myScene2 : destroy function
-- "scene:destroy()"
function scene:destroy( event )

    local sceneGroup = self.view

    -- Called prior to the removal of scene's view
    -- Insert code here to clean up the scene
    -- Example: remove display objects, save state, etc.
end



-- -------------------------------------------------------------------------------

-- Listener setup
scene:addEventListener( "create", scene )
scene:addEventListener( "show", scene )
scene:addEventListener( "hide", scene )
scene:addEventListener( "destroy", scene )

-- -------------------------------------------------------------------------------

return scene
</pre>









[1]: <%= current_page.data.baseURL %>images/blog-common/separate-line.png  
[2]: <%= current_page.data.baseURL %>images/blog-common/separate-line-with-indent.png  
[3]: <%= current_page.data.baseURL %>images/blog-common/icon-h1.png  
[4]: <%= current_page.data.baseURL %>images/blog-common/bookmark-blank-image.png  
[5]: <%= current_page.data.baseURL %>images/blog-common/external-link-15x15.png  
[6]: <%= current_page.data.baseURL %>images/blog-common/external-link-30x30.png

[7]: <%= current_page.data.baseURL %>images/categories/Corona%20SDK/using-tableview-001.png
[8]: <%= current_page.data.baseURL %>images/categories/Corona%20SDK/using-tableview-002.png
